
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a0  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000442  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  8e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <serial_init>:
}

void serial_print_float(float x){
	char *temp="";
	char *print_float = _float_to_char(x, temp);
	serial_print_string(print_float);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  9e:	e1 ec       	ldi	r30, 0xC1	; 193
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	80 83       	st	Z, r24
  ae:	e2 ec       	ldi	r30, 0xC2	; 194
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <serial_initialise>:
  ba:	9b 01       	movw	r18, r22
  bc:	ac 01       	movw	r20, r24
  be:	60 e4       	ldi	r22, 0x40	; 64
  c0:	72 e4       	ldi	r23, 0x42	; 66
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodsi4>
  ca:	ca 01       	movw	r24, r20
  cc:	b9 01       	movw	r22, r18
  ce:	61 50       	subi	r22, 0x01	; 1
  d0:	71 09       	sbc	r23, r1
  d2:	81 09       	sbc	r24, r1
  d4:	91 09       	sbc	r25, r1
  d6:	08 95       	ret

000000d8 <serial_out>:
  d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  dc:	95 ff       	sbrs	r25, 5
  de:	fc cf       	rjmp	.-8      	; 0xd8 <serial_out>
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e4:	08 95       	ret

000000e6 <serial_print_string>:
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	7c 01       	movw	r14, r24
  f4:	fc 01       	movw	r30, r24
  f6:	01 90       	ld	r0, Z+
  f8:	00 20       	and	r0, r0
  fa:	e9 f7       	brne	.-6      	; 0xf6 <serial_print_string+0x10>
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	8f 01       	movw	r16, r30
 100:	08 1b       	sub	r16, r24
 102:	19 0b       	sbc	r17, r25
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
 108:	07 c0       	rjmp	.+14     	; 0x118 <serial_print_string+0x32>
 10a:	f7 01       	movw	r30, r14
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	80 81       	ld	r24, Z
 112:	0e 94 6c 00 	call	0xd8	; 0xd8 <serial_out>
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c0 17       	cp	r28, r16
 11a:	d1 07       	cpc	r29, r17
 11c:	b4 f3       	brlt	.-20     	; 0x10a <serial_print_string+0x24>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{
	char *serial_show;
    /* Replace with your application code */
	DDRD = DDRD & 0b00000111;
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	87 70       	andi	r24, 0x07	; 7
 130:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0b11111000;
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	88 6f       	ori	r24, 0xF8	; 248
 136:	8b b9       	out	0x0b, r24	; 11
	
	serial_init(serial_initialise(BAUD_RATE));
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	7b e4       	ldi	r23, 0x4B	; 75
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 5d 00 	call	0xba	; 0xba <serial_initialise>
 144:	cb 01       	movw	r24, r22
 146:	0e 94 4b 00 	call	0x96	; 0x96 <serial_init>
	
    while (1) 
    {
		if((PIND & 0b00001000) > 0){
 14a:	4b 9b       	sbis	0x09, 3	; 9
 14c:	04 c0       	rjmp	.+8      	; 0x156 <main+0x2a>
			serial_show = "LED 0 is active\n";
			serial_print_string(serial_show);
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
		}
		if((PIND & 0b00010000) > 0){
 156:	4c 9b       	sbis	0x09, 4	; 9
 158:	04 c0       	rjmp	.+8      	; 0x162 <main+0x36>
			serial_show = "LED 1 is active\n";
			serial_print_string(serial_show);
 15a:	85 e1       	ldi	r24, 0x15	; 21
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
		}
		if((PIND & 0b00100000) > 0){
 162:	4d 9b       	sbis	0x09, 5	; 9
 164:	04 c0       	rjmp	.+8      	; 0x16e <main+0x42>
			serial_show = "LED 2 is active\n";
			serial_print_string(serial_show);
 166:	86 e2       	ldi	r24, 0x26	; 38
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
		}
		if((PIND & 0b01000000) > 0) {
 16e:	4e 9b       	sbis	0x09, 6	; 9
 170:	04 c0       	rjmp	.+8      	; 0x17a <main+0x4e>
			serial_show = "LED 3 is active\n";
			serial_print_string(serial_show);
 172:	87 e3       	ldi	r24, 0x37	; 55
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
		}
		if((PIND & 0b10000000) > 0){
 17a:	4f 9b       	sbis	0x09, 7	; 9
 17c:	04 c0       	rjmp	.+8      	; 0x186 <main+0x5a>
			serial_show = "LED 4 is active\n";
			serial_print_string(serial_show);
 17e:	88 e4       	ldi	r24, 0x48	; 72
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
		}
		
		serial_show = "\n\n\n\n\n\n";
		serial_print_string(serial_show);
 186:	89 e5       	ldi	r24, 0x59	; 89
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 73 00 	call	0xe6	; 0xe6 <serial_print_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	87 ea       	ldi	r24, 0xA7	; 167
 192:	91 e6       	ldi	r25, 0x61	; 97
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x68>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x72>
 19e:	00 00       	nop
 1a0:	d4 cf       	rjmp	.-88     	; 0x14a <main+0x1e>

000001a2 <__udivmodsi4>:
 1a2:	a1 e2       	ldi	r26, 0x21	; 33
 1a4:	1a 2e       	mov	r1, r26
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	fd 01       	movw	r30, r26
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__udivmodsi4_ep>

000001ae <__udivmodsi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	ee 1f       	adc	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	a2 17       	cp	r26, r18
 1b8:	b3 07       	cpc	r27, r19
 1ba:	e4 07       	cpc	r30, r20
 1bc:	f5 07       	cpc	r31, r21
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__udivmodsi4_ep>
 1c0:	a2 1b       	sub	r26, r18
 1c2:	b3 0b       	sbc	r27, r19
 1c4:	e4 0b       	sbc	r30, r20
 1c6:	f5 0b       	sbc	r31, r21

000001c8 <__udivmodsi4_ep>:
 1c8:	66 1f       	adc	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	1a 94       	dec	r1
 1d2:	69 f7       	brne	.-38     	; 0x1ae <__udivmodsi4_loop>
 1d4:	60 95       	com	r22
 1d6:	70 95       	com	r23
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	bd 01       	movw	r22, r26
 1e2:	cf 01       	movw	r24, r30
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
