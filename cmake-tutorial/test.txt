We write the following set of code in the CMakeLists.txt file

cmake_minimum_required(VERSION 3.5)

project(HelloApp
    VERSION 0.0.1
    DESCRIPTION "The leading Hello World App"
    LANGUAGES CXX)

add_executable(HelloAppBinary main.cpp)
target_compile_features(HelloAppBinary PRIVATE cxx_std_20)

Then we create a build folder and run cmake ..
If we have our files in the sources folder, we run cmake ../sources
This creates all the make files in the build folder.
And then just run make in case of linux.

For Windows, it creates a Visual Studio 2019 solution which we can build in Visual Studio itself
Or we can run the msbuild function in the developer command prompt to get what we want

We dont need to create the build files everytime we try to build something. Instead what we have to do is just run make
in case we change anything inside of the build folder


Generators are a way to specify the build system to be used to generate out files in the system

To execute according to a specific algorithm, what we can do is

cmake -G "Unix Makefiles" ../sources/

The build command for ninja is just ninja

Cmake --build .

This creates the executable just the way we want it to

Instead of running make, we do have a powerful alternative with the cmake build system itself

We can just take a look at all the potential commands by doing

cmake --build . --target help

This shows all the possible outcomes for the commands.

Now in case we have multiple files, then what we can do is

Inside of add_executable(HelloBinary main.cpp src/dog.cpp src/operations.cpp)


Another way to achieve this thing is to use globing

file(GLOB_RECURSE SRC_FILES src/*.cpp)
add_executable(HelloBinary main.cpp ${SRC_FILES})


To include the headers directory,
target_include_directories(HelloAppBinary PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

To include the implementation files,

Globing as a procedure is not advised

Selecting a different compiler from a different generator

cmake -GNinja -D CMAKE_CXX_COMPILER=g++ ../source/

Now an executable is not the only thing that we can achieve with this.


Now to avoid using the c++_20 standard everytime and mention it everywhere, we can create a couple of variables

set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 20)

If we pass the command like
cmake --build . --target logger

This will only create a logger.lib and nothing else

The extension for a library in Windows is .lib and for linux is .a

The final CMakeLists.txt file is 

cmake_minimum_required(VERSION 3.5)

#set(CXX_STANDARD_REQUIRED ON) #Make C++20 a hard requirement
#set(CMAKE_CXX_STANDARD 20) # Default C++ standard for targets

project(HelloApp
                 VERSION 1.0.0 
                DESCRIPTION 
                "The leading Hello World App"
                 LANGUAGES CXX)  

add_library(operations STATIC src/operations.cpp)
target_include_directories(operations PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_compile_features(operations PUBLIC cxx_std_20)


add_library(logger STATIC logger/src/log.cpp)
target_compile_features(logger PUBLIC cxx_std_20)
target_include_directories(logger PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/logger/include)

add_executable(HelloAppBinary main.cpp
                                src/dog.cpp)

target_include_directories(HelloAppBinary PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_compile_features(HelloAppBinary PUBLIC cxx_std_20)
target_link_libraries(HelloAppBinary PUBLIC operations logger)

